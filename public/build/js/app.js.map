{"version":3,"sources":["app.js","admin/adminController.js","clients/clientFactory.js","projects/estimateFactory.js","projects/projectController.js","projects/projectFactory.js","reports/dashboardController.js","reports/reportController.js","reports/weeklyReportController.js","tickets/ticketController.js","tickets/ticketFactory.js","comments/commentFactory.js","timeEntry/timeEntryFact.js","users/logoutController.js","users/userController.js","users/userFactory.js"],"names":[],"mappingszYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACphDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClfile":"app.js","sourcesContent":["var myApp = angular.module('myApp', [\n    'ngRoute',\n    'ngCookies',\n    'oi.select',\n    '720kb.datepicker',\n    'chart.js',\n    'angular.snackbar',\n    'angular-loading-bar',\n    'textAngular',\n    'bgf.paginateAnything',\n    'cfp.hotkeys',\n    'ngFileUpload'\n]);\n\nmyApp.run(['userFactory', '$cookies', '$rootScope', '$location',\n    function(userFactory, $cookies, $rootScope, $location) {\n        /*check if auth object is available*/\n        if ($cookies.get('userObj') === undefined) {\n            userFactory.getUserObj().success(function(response) {\n                console.log('created user object', response);\n                $cookies.putObject('userObj', response);\n            });\n        }\n\n        /*handling the route change to check if the current url is access based*/\n        $rootScope.$on(\"$routeChangeStart\",\n            function(event, next, current) {\n                if (next.$$route.roles !== undefined) {\n                    var access = false;\n                    var userObj = $cookies.getObject('userObj');\n                    /*console.log('userObj', userObj);*/\n                    angular.forEach(next.$$route.roles, function(roleValue, roleKey) {\n                        /*console.log(roleValue);*/\n                        angular.forEach(userObj.roles, function(userValue, userKey) {\n                            /*console.log(userValue);*/\n                            if (roleValue == userValue.roleName) {\n                                access = true;\n                            }\n                        });\n                    });\n\n                    /*console.log(access);*/\n                    if (access == false) {\n                        $location.path('access-denied');\n                    }\n                }\n            });\n    }\n]);\n\nmyApp.filter('unsafe', function($sce) {\n    return $sce.trustAsHtml;\n});\n\nmyApp.filter('ucfirst', function() {\n    return function(string) {\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    }\n});\n\nmyApp.controller('globalController', ['$scope', '$location', 'hotkeys',\n    function($scope, $location, hotkeys) {\n\n        /*hotkeys.add({\n            combo: 'ctrl+t+e',\n            description: 'This one goes to 11',\n            callback: function() {\n                $location.path('ticket/my-tickets');\n                console.log(123);\n            }\n        });*/\n\n        angular.extend($scope, {\n            reportTabUrl: '/templates/manager/reportTabs.html',\n            singleProjectTab: '/templates/projects/singleProjectTab.html',\n            ticketsTab: '/templates/tickets/ticket-tab.html',\n            ticketDetailsTab: '/templates/tickets/ticket-details-tab.html',\n            checkActiveLink: function(currLink) {\n                if ($location.path() == currLink) {\n                    return 'active';\n                }\n            },\n            timeAgo: function(string) {\n                return moment(string).fromNow();\n            },\n            momentTime: function(string, format) {\n                return moment(string).format(format);\n            }\n        })\n    }\n]);\n\n/*Routes*/\nmyApp.config(['$routeProvider', '$locationProvider',\n    function($routeProvider, $locationProvider) {\n        $routeProvider.when('/', {\n            templateUrl: '/templates/manager/managerReports.html',\n            controller: 'dashboardController'\n        });\n\n        $routeProvider.when('/logout', {\n            templateUrl: '/templates/users/user-logout.html',\n            controller: 'logoutController'\n        });\n\n        $routeProvider.when('/access-denied', {\n            templateUrl: '/templates/admin/access-denied.html',\n            controller: 'dashboardController'\n        });\n\n        $routeProvider.when('/report', {\n            templateUrl: '/templates/manager/reports.html',\n            controller: 'reportController',\n            roles: ['Admin', 'Project Manager'],\n            resolve: {\n                action: function(clientFactory) {\n                    return {\n                        clients: clientFactory.getClientList()\n                    }\n                }\n            }\n        });\n\n        $routeProvider.when('/weekly-report-list', {\n            templateUrl: '/templates/manager/weeklyReport.html',\n            controller: 'weeklyReportController',\n            roles: ['Admin', 'Project Manager'],\n            resolve: {\n                action: function(clientFactory) {\n                    return {\n                        //clients: clientFactory.getClientList()\n                    }\n                }\n            }\n        });\n\n        $routeProvider.when('/projects', {\n            templateUrl: '/templates/projects/projects-listing.html',\n            controller: 'projectController',\n            resolve: {\n                action: function(projectFactory) {\n                    return {\n                        projects: projectFactory.getProjectList()\n                    }\n                }\n            }\n        });\n\n        $routeProvider.when('/projects/add', {\n            templateUrl: '/templates/projects/add-project.html',\n            controller: 'projectController',\n            roles: ['Admin', 'Project Manager'],\n            resolve: {\n                action: function(clientFactory) {\n                    return {\n                        clients: clientFactory.getClientList()\n                    }\n                }\n            }\n        });\n\n        $routeProvider.when('/projects/:id', {\n            templateUrl: '/templates/projects/projects-details.html',\n            controller: 'projectController',\n            resolve: {\n                action: function() {\n                    return 'single';\n                }\n            }\n        });\n\n        $routeProvider.when('/projects/:pid/comments', {\n            templateUrl: '/templates/projects/project-comments.html',\n            controller: 'projectController',\n            roles: ['Admin', 'Project Manager'],\n            resolve: {\n                action: function(commentFactory, $route) {\n                    return {\n                        comments: commentFactory.getProjectComments($route.current.params.pid)\n                    };\n                }\n            },\n            roles: ['Admin', 'Project Manager']\n        });\n\n        $routeProvider.when('/projects/:id/estimate/add', {\n            templateUrl: '/templates/projects/project-estimate-add.html',\n            controller: 'projectController',\n            resolve: {\n                action: function() {\n                    return 'single';\n                }\n            },\n            roles: ['Admin', 'Project Manager']\n        });\n\n        $routeProvider.when('/projects/estimate/:estimateId', {\n            templateUrl: '/templates/projects/estimate-edit.html',\n            controller: 'projectController',\n            resolve: {\n                action: function() {\n                    return 'single';\n                }\n            },\n            roles: ['Admin', 'Project Manager']\n        });\n\n        /*Management URLs*/\n        $routeProvider.when('/manage/back-date-entry', {\n            templateUrl: '/templates/admin/backdateentry.html',\n            controller: 'adminController',\n            resolve: {\n                action: function(userFactory, timeEntry) {\n                    return {\n                        users: userFactory.getUserList(),\n                        allEntries: timeEntry.getBackDateEntries()\n                    };\n                }\n            },\n            roles: ['Admin', 'Project Manager']\n        });\n\n        $routeProvider.when('/manage/view-back-date-entry/:backdateentryId', {\n            templateUrl: '/templates/admin/view-backdateentry.html',\n            controller: 'adminController',\n            resolve: {\n                action: function(userFactory, timeEntry) {\n                    return {\n                        users: userFactory.getUserList(),\n                        allEntries: timeEntry.getBackDateEntries()\n                    };\n                }\n            },\n            roles: ['Admin', 'Project Manager']\n        });\n\n        $routeProvider.when('/manage/view-back-date-entry/:backdateentryId', {\n            templateUrl: '/templates/admin/view-backdateentry.html',\n            controller: 'adminController',\n            resolve: {\n                action: function(userFactory, timeEntry) {\n                    return {\n                        users: userFactory.getUserList(),\n                        allEntries: timeEntry.getBackDateEntries()\n                    };\n                }\n            },\n            roles: ['Admin', 'Project Manager']\n        });\n\n        $routeProvider.when('/user/request-backdate-entry', {\n            templateUrl: '/templates/users/request-backdate.html',\n            controller: 'userController',\n            resolve: {\n                action: function(userFactory, timeEntry) {\n                    return {\n                        users: userFactory.getUserListByRole(),\n                        allEntries: timeEntry.getRequestBackDateEntries()\n                    };\n\n                }\n            }\n        });\n\n        $routeProvider.when('/user/view-request-backdate/:backdateentryId', {\n            templateUrl: '/templates/users/view-request-backdate.html',\n            controller: 'userController',\n            resolve: {\n                action: function(userFactory, timeEntry, $route) {\n                    return {\n                        singleEntry: timeEntry.getRequestBackDateEntriesById($route.current.params.backdateentryId)\n\n                    };\n                }\n            }\n        });\n\n        /*Ticket section starts*/\n        $routeProvider.when('/ticket/list', {\n            templateUrl: '/templates/tickets/list-ticket.html',\n            controller: 'ticketController',\n            roles: ['Admin', 'Project Manager'],\n            resolve: {\n                action: function(projectFactory, userFactory, ticketFactory) {\n                    return {\n                        tickets: ticketFactory.getAllTickets(),\n                        projects: projectFactory.getProjectList(),\n                        users: userFactory.getUserList(),\n                        type: ticketFactory.getTickeType(),\n                        status: ticketFactory.getTickeStatus()\n                    }\n                }\n            }\n        });\n\n        $routeProvider.when('/ticket/add', {\n            templateUrl: '/templates/tickets/add-ticket.html',\n            roles: ['Admin', 'Project Manager'],\n            controller: 'ticketController',\n            resolve: {\n                action: function(projectFactory, userFactory, ticketFactory) {\n                    return {\n                        projects: projectFactory.getProjectList(),\n                        users: userFactory.getUserList(),\n                        type: ticketFactory.getTickeType(),\n                        status: ticketFactory.getTickeStatus()\n                    }\n                }\n            }\n        });\n\n        $routeProvider.when('/ticket/view/:ticketId', {\n            templateUrl: '/templates/tickets/view-ticket.html',\n            controller: 'ticketController',\n            resolve: {\n                action: function(projectFactory, userFactory, ticketFactory, $route, commentFactory) {\n                    return {\n                        projects: projectFactory.getProjectList(),\n                        users: userFactory.getUserList(),\n                        type: ticketFactory.getTickeType(),\n                        status: ticketFactory.getTickeStatus(),\n                        ticket: ticketFactory.getTicketById($route.current.params.ticketId),\n                        comments: commentFactory.getTicketComments($route.current.params.ticketId)\n                    }\n                }\n            }\n        });\n\n        $routeProvider.when('/ticket/view/:ticketId/discussion', {\n            templateUrl: '/templates/tickets/view-ticket-discussions.html',\n            controller: 'ticketController',\n            resolve: {\n                action: function(ticketFactory, $route, commentFactory) {\n                    return {\n                        ticket: ticketFactory.getTicketById($route.current.params.ticketId),\n                        comments: commentFactory.getTicketComments($route.current.params.ticketId)\n                    }\n                }\n            }\n        });\n\n        $routeProvider.when('/ticket/view/:ticketId/attachments', {\n            templateUrl: '/templates/tickets/view-ticket-attachments.html',\n            controller: 'ticketController',\n            resolve: {\n                action: function(ticketFactory, $route) {\n                    return {\n                        attachments: ticketFactory.getTicketAttachments($route.current.params.ticketId)\n                    }\n                }\n            }\n        });\n\n        $routeProvider.when('/ticket/view/:ticketId/time-entries', {\n            templateUrl: '/templates/tickets/view-ticket-time-entries.html',\n            controller: 'ticketController',\n            resolve: {\n                action: function(ticketFactory, $route) {\n                    return {\n                        ticket: ticketFactory.getTicketById($route.current.params.ticketId),\n                        timeEntries: ticketFactory.getTicketTimeEntries($route.current.params.ticketId)\n                    }\n                }\n            }\n        });\n\n        $routeProvider.when('/ticket/my-tickets', {\n            templateUrl: '/templates/tickets/my-tickets.html',\n            controller: 'ticketController',\n            resolve: {\n                action: function(ticketFactory) {\n                    return {\n                        myTickets: ticketFactory.getMyTickets(),\n                    }\n                }\n            }\n        });\n\n        $routeProvider.when('/ticket/tickets-following', {\n            templateUrl: '/templates/tickets/tickets-following.html',\n            controller: 'ticketController',\n            resolve: {\n                action: function(ticketFactory) {\n                    return {\n                        ticketsFollowing: ticketFactory.getTicketsFollowing(),\n                    }\n                }\n            }\n        });\n\n        $routeProvider.otherwise('/');\n    }\n]);\n","myApp.controller('adminController', ['$scope', 'action', 'timeEntry', 'snackbar',\n    function($scope, action, timeEntry, snackbar) {\n\n        /*check if users are loaded*/\n        if (action && action.users != undefined) {\n            action.users.success(function(response) {\n                console.log('all users', response);\n                $scope.users = response;\n            });\n        }\n\n        if (action && action.allEntries != undefined) {\n            window.document.title = 'Backdate entry';\n\n            action.allEntries.success(function(response) {\n                if (response.length != 0) {\n                    console.log('all Entries', response.length);\n                    $scope.allEntries = response;\n                    $scope.showEntries = true;\n                }\n            });\n        }\n\n        /*Variables*/\n        angular.extend($scope, {\n            backdateEntry: {},\n            allEntries: {},\n            showEntries: false\n        });\n\n        /*Methods*/\n        angular.extend($scope, {\n            backdateEntrySubmit: function(backdateEntryForm) {\n                if (backdateEntryForm.$valid) {\n                    /*get all the user ids*/\n                    var userIds = [];\n                    if ($scope.backdateEntry != undefined) {\n                        angular.forEach($scope.backdateEntry.users, function(value, key) {\n                            userIds.push(value.id);\n                        });\n                    }\n\n                    /*create the post data*/\n                    var entryData = {\n                        date: $scope.backdateEntry.backdate,\n                        users: userIds,\n                        comment: $scope.backdateEntry.reason\n                    };\n\n                    timeEntry.saveBackDateEntry(entryData).success(function(response) {\n                        console.log('backdate entries', response);\n                        $scope.allEntries = response;\n                        $scope.backdateEntry = {};\n                        $scope.showEntries = true;\n                        snackbar.create(\"Entry added and mail sent.\", 1000);\n                    });\n                }\n            }\n        });\n    }\n]);\n","myApp.factory('clientFactory', ['$http', function($http) {\n    var clientFactory = {};\n\n    clientFactory.getClientList = function() {\n        return $http.get(baseUrl + 'api/get-client-list');\n    }\n\n    return clientFactory;\n}]);\n","myApp.factory('estimateFactory', ['$http', function($http) {\n    var estimateFactory = {};\n\n    estimateFactory.getEstimateById = function(id) {\n        return $http.get(baseUrl + 'api/get-estimate-by-id/' + id);\n    }\n\n    estimateFactory.updateEstimate = function(estimateData) {\n        return $http({\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            url: baseUrl + 'api/update-estimate-by-id',\n            method: 'POST',\n            data: estimateData\n        });\n    }\n\n    return estimateFactory;\n}])\n","myApp.controller('projectController', ['$scope', 'projectFactory', '$routeParams', 'snackbar', '$location', 'action', 'clientFactory', 'estimateFactory', 'timeEntry', 'commentFactory',\n\n    function($scope, projectFactory, $routeParams, snackbar, $location, action, clientFactory, estimateFactory, timeEntry, commentFactory) {\n\n        /*loading all projects*/\n        if (action && action.projects != undefined) {\n            action.projects.success(function(response) {\n                console.log('all projects', response);\n                $scope.projects = response;\n            });\n        }\n\n        if (action && action.clients != undefined) {\n            action.clients.success(function(response) {\n                console.log('all clients', response);\n                $scope.clients = response;\n            });\n        }\n\n        /*Loading the comments for a project*/\n        if (action && action.comments != undefined) {\n            $scope.singleProjectId = $routeParams.pid;\n            action.comments.success(function(response) {\n                console.log('all comments', response);\n                $scope.singleProject = response;\n                $scope.comments = response;\n            });\n        }\n\n        /*load single project data*/\n        if ($routeParams.id) {\n            $scope.singleProjectId = $routeParams.id;\n            projectFactory.getProjectById($routeParams.id).success(function(response) {\n                console.log('Single project', response);\n                $scope.singleProject = response;\n                $scope.singleProject.hours_allocated = 0;\n                $scope.singleProject.hours_consumed = 0;\n\n                angular.forEach(response.estimates, function(estimate, key) {\n                    $scope.singleProject.hours_allocated += estimate.hours_allocated;\n                    $scope.singleProject.hours_consumed += estimate.hours_consumed;\n                });\n\n                $scope.singleProject.percent_complete = $scope.singleProject.hours_consumed / $scope.singleProject.hours_allocated * 100;\n                $scope.singleProject.percent_complete = parseFloat($scope.singleProject.percent_complete).toFixed(2);\n\n                $scope.showSingleProject = true;\n            });\n        }\n\n        /*When looking at an individual estimate*/\n        if ($routeParams.estimateId) {\n            /*Get the estimate details by id*/\n            estimateFactory.getEstimateById($routeParams.estimateId).success(function(response) {\n                console.log('Need to load estimate', response);\n                $scope.singleEstimate = response;\n\n                /*Get the project details by id*/\n                projectFactory.getProjectById(response.project_id).success(function(response) {\n                    console.log('Single project', response);\n                    $scope.singleProject = response;\n                    $scope.showSingleEstimate = true;\n\n                    /*Get time entries for the estimate*/\n                    timeEntry.getEntriesForEstimate($scope.singleEstimate.id).success(function(response) {\n                        $scope.estimateTimes = response;\n                        $scope.estimateTimes.total = 0;\n                        angular.forEach(response, function(estimate, key) {\n                            $scope.estimateTimes.total += estimate.time;\n                        });\n\n                        $scope.estimateTimes.total = parseFloat($scope.estimateTimes.total).toPrecision(2);\n                        console.log('Time entries', response);\n                    });\n                });\n            });\n        }\n\n        angular.extend($scope, {\n            singleProject: {},\n            showSingleProject: false,\n            showSingleEstimate: false,\n            newEstimateFormSubmit: false,\n            projectEstimte: {},\n            singleEstimate: {},\n            newProject: {}\n        });\n\n        angular.extend($scope, {\n            saveComment: function(addCommentForm) {\n                if (addCommentForm.$valid) {\n                    console.log($scope.newComment, $routeParams.pid);\n                    var commentData = {\n                        comment: $scope.newComment,\n                        project_id: $routeParams.pid\n                    };\n                    commentFactory.saveComment(commentData).success(function(response) {\n                        console.log(response);\n                        $scope.singleProject = response;\n                        $scope.comments = response;\n                        $scope.newComment = \"\";\n                    });\n                } else {\n                    $scope.newEstimateFormSubmit = true;\n                    snackbar.create(\"Your form has errors!!\", 1000);\n                }\n            },\n            deleteProject: function() {\n                var r = confirm(\"This will delete the project and it's time. Ok?\");\n                if (r === true) {\n                    projectFactory.deleteProject($routeParams.id).success(function(response) {\n                        $location.path('/projects');\n                        snackbar.create(\"Project deleted\", 1000);\n                    });\n                }\n            },\n            editEstiate: function(editEstimateForm) {\n                if (editEstimateForm.$valid) {\n                    var estimateData = {\n                        id: $scope.singleEstimate.id,\n                        desc: $scope.singleEstimate.desc,\n                        hours_allocated: $scope.singleEstimate.hours_allocated,\n                        status: $scope.singleEstimate.status\n                    };\n\n                    estimateFactory.updateEstimate(estimateData).success(function(response) {\n                        console.log('estimate edited', response);\n                        $location.path('/projects/' + $scope.singleProject.id);\n                        snackbar.create(\"Estimate saved\", 1000);\n                    });\n                } else {\n                    $scope.newEstimateFormSubmit = true;\n                    snackbar.create(\"Your form has errors!!\", 1000);\n                }\n            },\n            addNewProject: function(addProjectForm) {\n                if (addProjectForm.$valid) {\n                    console.log($scope.newProject);\n                    var newProjectData = {\n                        name: $scope.newProject.name,\n                        client: $scope.newProject.client_id[0].id\n                    };\n                    projectFactory.saveNewProject(newProjectData).success(function(response) {\n                        console.log('save new project', response);\n                        $location.path('/projects');\n                        snackbar.create(\"Project added\", 1000);\n                    })\n                } else {\n                    $scope.newEstimateFormSubmit = true;\n                    snackbar.create(\"Your form has errors!!\", 1000);\n                }\n            },\n            saveProjectEstimate: function(addProjectEstimateForm) {\n                if (addProjectEstimateForm.$valid) {\n                    console.log('$scope.projectEstimte', $scope.projectEstimte);\n                    var estimateData = {\n                        project_id: $routeParams.id,\n                        desc: $scope.projectEstimte.desc,\n                        hours_allocated: $scope.projectEstimte.hours_allocated,\n                    };\n\n                    projectFactory.saveProjectEstimate(estimateData).success(function(response) {\n                        console.log(response);\n                        $location.path('/projects/' + $routeParams.id);\n                        snackbar.create(\"Estimate added\", 1000);\n                    });\n                } else {\n                    $scope.newEstimateFormSubmit = true;\n                    snackbar.create(\"Your form has errors!!\", 1000);\n                }\n            }\n        });\n    }\n]);\n","myApp.factory('projectFactory', ['$http', function($http) {\n    var projectFactory = {};\n\n    projectFactory.getProjectList = function() {\n        return $http.get(baseUrl + 'api/get-project-list');\n    }\n\n    projectFactory.getProjectById = function(id) {\n        return $http.get(baseUrl + 'api/get-project-by-id/' + id);\n    }\n\n    projectFactory.saveProjectEstimate = function(estimateData) {\n        return $http({\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            url: baseUrl + 'api/save-project-estimate',\n            method: 'POST',\n            data: estimateData\n        });\n    }\n\n    projectFactory.saveNewProject = function(newProjectData) {\n        return $http({\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            url: baseUrl + 'api/save-new-project',\n            method: 'POST',\n            data: newProjectData\n        });\n    }\n\n    projectFactory.deleteProject = function(id) {\n        return $http({\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            url: baseUrl + 'api/delete-project',\n            method: 'POST',\n            data: {\n                id: id\n            }\n        });\n    }\n\n    return projectFactory;\n}]);\n","myApp.controller('dashboardController', ['$scope', 'timeEntry', '$parse',\n    function($scope, timeEntry, $parse) {\n        timeEntry.getTimeSheetEntryByDate().success(function(response) {\n            $scope.timeEntryOverview = response;\n        });\n\n        angular.extend($scope, {\n            graphLabels: {}\n        });\n\n        angular.extend($scope, {\n            changeTag: function(url) {\n                $scope.tabUrl = url;\n            }\n        });\n\n        $scope.labels = [\"Download Sales\", \"In-Store Sales\", \"Mail-Order Sales\"];\n        $scope.data = [300, 500, 100];\n    }\n]);\n","myApp.controller('reportController', ['$scope', 'timeEntry', '$timeout', 'projectFactory', 'userFactory', 'action','$location',\n    function($scope, timeEntry, $timeout, projectFactory, userFactory, action,$location) {\n\n        $scope.perPage = 100;\n        $scope.page = 0;\n\n        $scope.clientLimit = 250;\n        $scope.postUrl = baseUrl+'api/time-report';\n        $scope.postData = {};\n\n        $scope.$on('pagination:loadStart', function (event, status, config) {\n            $scope.page = event.currentScope.page;\n            $scope.perPage = event.currentScope.perPage;\n        });\n\n        /*check if clients are loaded*/\n        if (action && action.clients != undefined) {\n            action.clients.success(function(response) {\n                console.log('all clients', response);\n                $scope.clients = response;\n            });\n        }\n\n        userFactory.getUserList().then(function(response) {\n            console.log('user list', response.data);\n            angular.forEach(response.data, function(value, key) {\n                $scope.users.push(value);\n            });\n            //});\n        }).then(function() {\n            projectFactory.getProjectList().then(function(response) {\n                console.log('project list', response.data);\n                angular.forEach(response.data, function(value, key) {\n                    $scope.projects.push(value);\n                });\n\n                $timeout(function() {\n                    $scope.showData = true;\n                }, 500);\n            });\n        });\n\n        angular.extend($scope, {\n            totalTime: 0,\n            showData: false,\n            filters: {},\n            users: [],\n            projects: [],\n            clients: {},\n            dt: new Date(),\n            csrf: csrf\n        });\n\n        angular.extend($scope, {\n            filterTime: function(filterTimeFrm) {\n                console.log($scope.filters);\n                var queryParams = {};\n\n                if ($scope.filters.desc != \"\") {\n                    queryParams.desc = $scope.filters.desc;\n                }\n\n                if ($scope.filters.users !== undefined && $scope.filters.users.length > 0) {\n                    queryParams.users = [];\n                    angular.forEach($scope.filters.users, function(value, key) {\n                        queryParams.users.push(value.id);\n                    });\n                }\n\n                if ($scope.filters.clients !== undefined && $scope.filters.clients.length > 0) {\n                    queryParams.clients = [];\n                    angular.forEach($scope.filters.clients, function(value, key) {\n                        queryParams.clients.push(value.id);\n                    });\n                }\n\n                if ($scope.filters.project !== undefined && $scope.filters.project.length > 0) {\n                    queryParams.projects = [];\n                    angular.forEach($scope.filters.project, function(value, key) {\n                        queryParams.projects.push(value.id);\n                    });\n                }\n\n                if ($scope.filters.startDate !== undefined) {\n                    queryParams.startDate = $scope.filters.startDate;\n                }\n\n                if ($scope.filters.endDate !== undefined) {\n                    queryParams.endDate = $scope.filters.endDate;\n                    var startDateOfYear = moment(queryParams.startDate).dayOfYear();\n                    var endDateOfYear = moment(queryParams.endDate).dayOfYear();\n\n                    if ($scope.filters.startDate !== undefined && endDateOfYear < startDateOfYear) {\n                        alert('End date is before start date.');\n                        return false;\n                    }\n                }\n\n                $scope.postData.filters = angular.copy(queryParams);\n                $scope.postFormFilters = angular.toJson($scope.postData.filters); // as download does not require \"xls\" param\n            },\n            downloadReport:function(){\n                console.log('report');\n                $scope.postFormFilters = angular.toJson($scope.postData.filters);\n                $('#downloadRptForm').submit();\n            },\n            clearFilters: function() {\n                $scope.filters = {};\n            }\n        });\n    }\n]);\n","myApp.controller('weeklyReportController', ['$scope', 'timeEntry', '$timeout', 'projectFactory', 'userFactory', 'action','$location',\n    function($scope, timeEntry, $timeout, projectFactory, userFactory, action,$location) {\n        $scope.perPage = 100;\n        $scope.page = 0;\n\n        $scope.clientLimit = 250;\n        $scope.postUrl = baseUrl+'manager/weekly-report-search';\n        $scope.postData = {};\n\n        $scope.$on('pagination:loadStart', function (event, status, config) {\n            $scope.page = event.currentScope.page;\n            $scope.perPage = event.currentScope.perPage;\n        });\n\n        userFactory.getUserList().then(function(response) {\n            console.log('user list', response.data);\n            angular.forEach(response.data, function(value, key) {\n                $scope.users.push(value);\n            });\n            $timeout(function() {\n                $scope.showData = true;\n            }, 500);\n            });\n     \n\n        angular.extend($scope, {\n            totalTime: 0,\n            showData: false,\n            filters: {},\n            users: [],\n            projects: [],\n            clients: {},\n            dt: new Date(),\n            csrf: csrf\n        });\n\n        angular.extend($scope, {\n            filterWeeklyReport: function(filterWeeklyFrm) {\n                console.log($scope.filters);\n                var queryParams = {};\n\n\n                if ($scope.filters.users !== undefined && $scope.filters.users.length > 0) {\n                    queryParams.users = [];\n                    angular.forEach($scope.filters.users, function(value, key) {\n                        queryParams.users.push(value.id);\n                    });\n                }\n\n                if ($scope.filters.startDate !== undefined) {\n                    queryParams.startDate = $scope.filters.startDate;\n                }\n\n                if ($scope.filters.endDate !== undefined) {\n                    queryParams.endDate = $scope.filters.endDate;\n                    var startDateOfYear = moment(queryParams.startDate).dayOfYear();\n                    var endDateOfYear = moment(queryParams.endDate).dayOfYear();\n\n                    if ($scope.filters.startDate !== undefined && endDateOfYear < startDateOfYear) {\n                        alert('End date is before start date.');\n                        return false;\n                    }\n                }\n\n                $scope.postData.filters = angular.copy(queryParams);\n                $scope.postFormFilters = angular.toJson($scope.postData.filters); // as download does not require \"xls\" param\n            },\n            clearFilters: function() {\n                $scope.filters = {};\n            }\n        });\n    }\n]);","/**\n * Created by amitav on 12/29/15.\n */\nmyApp.controller('ticketController', ['$scope', 'action', 'ticketFactory', '$location', 'snackbar', '$routeParams', 'commentFactory', 'hotkeys', 'Upload',\n    function($scope, action, ticketFactory, $location, snackbar, $routeParams, commentFactory, hotkeys, Upload) {\n\n        /*Adding hotkeys*/\n        hotkeys.add({\n            combo: 'ctrl+s+d',\n            description: 'This one goes to 11',\n            callback: function() {\n                $scope.saveNewConversation();\n            }\n        });\n\n        $scope.$watch('newTicket.project', function(newVal, oldVal){\n            if(newVal && newVal[0]) {\n                ticketFactory.getEstimatesByProject(newVal[0].id).success(function(response){\n                    $scope.newTicket.estimate = '';\n                    $scope.estimates = '';\n                    if(!angular.equals([],response.data)) {\n                        $scope.estimates = response.data;\n                        $scope.newTicket.estimate = $scope.estimates[0].id;\n                    }\n                });\n            }\n        }, true);\n\n        /*check if projects are loaded*/\n        if (action && action.projects != undefined) {\n            action.projects.success(function(response) {\n                console.log('all projects', response);\n                $scope.projects = response;\n                $scope.showTicketForm = true;\n            });\n        }\n\n        /*check if users are loaded*/\n        if (action && action.users != undefined) {\n            action.users.success(function(response) {\n                console.log('all users', response);\n                $scope.users = response;\n            });\n        }\n\n        /*load ticket type*/\n        if (action && action.type != undefined) {\n            action.type.success(function(response) {\n                console.log('all type', response);\n                $scope.ticketType = response;\n            });\n        }\n\n        /*load ticket status*/\n        if (action && action.status != undefined) {\n            action.status.success(function(response) {\n                console.log('all status', response);\n                $scope.ticketStatus = response;\n            });\n        }\n\n        /*load tickets*/\n        if (action && action.tickets != undefined) {\n            action.tickets.success(function(response) {\n                console.log('all tickets', response);\n                $scope.tickets = response;\n                $scope.viewTickets = true;\n            });\n        }\n\n        /*loading single ticket*/\n        if (action && action.ticket != undefined) {\n            $scope.showTicketForm = false;\n            action.ticket.success(function(response) {\n                console.log('thisTicket', response);\n                $scope.newTicket = response.data;\n                $scope.showTicketForm = true;\n            });\n        }\n\n        /*loading user's tickets*/\n        if (action && action.myTickets != undefined) {\n            action.myTickets.success(function(response) {\n                console.log('myTickets', response);\n                $scope.myTickets = response.data;\n                $scope.viewMyTickets = true;\n            });\n        }\n\n        if (action && action.ticketsFollowing != undefined) {\n            action.ticketsFollowing.success(function(response) {\n                console.log('tickets following', response);\n                $scope.ticketsFollowing = response.data;\n                $scope.viewTicketsFollowing = true;\n            });\n        }\n\n        /*check if the ticket time entries have loaded*/\n        if (action && action.timeEntries != undefined) {\n            action.timeEntries.success(function(response) {\n                console.log('tickets time entries', response);\n                $scope.timeEntries = response;\n                $scope.showTicketTimeEntries = true;\n                $scope.ticketTotalTime = 0;\n                angular.forEach($scope.timeEntries, function(value, key) {\n                    $scope.ticketTotalTime = $scope.ticketTotalTime + parseFloat(value.time);\n                });\n            });\n        }\n\n        /*loading ticket comments*/\n        if (action && action.comments != undefined) {\n            action.comments.success(function(response) {\n                console.log('ticket comments', response);\n                $scope.ticketComments = response.data.comments;\n                $scope.ticketAttachments = response.data.attachments;\n                $scope.showComments = true;\n            });\n        }\n\n        /*loading ticket comments*/\n        if (action && action.attachments != undefined) {\n            action.attachments.success(function(response) {\n                $scope.attachmentList = response.data;\n                $scope.showAttachments = true;\n                console.log('attachment list', response.data);\n            });\n        }\n\n        /**\n         * This check is required to get the active link on the tab\n         * because ticket id is coming after the $http request\n         * and so the route function does not get ticket id\n         */\n        if ($routeParams.ticketId != undefined) {\n            $scope.ticketNum = $routeParams.ticketId;\n        }\n\n        /*model*/\n        angular.extend($scope, {\n            formUrl: baseUrl + 'templates/tickets/ticket-form.html',\n            showTicketForm: false,\n            newTicket: {\n                type: 'none',\n                status: 'none'\n            },\n            projects: {},\n            ticketType: {},\n            ticketStatus: {},\n            tickets: {},\n            myTickets: {},\n            timeEntries: {},\n            showTicketTimeEntries: false,\n            viewMyTickets: false,\n            showComments: false,\n            viewTickets: true,\n            viewTicketsFollowing: false,\n            conversation: {\n                file:[]\n            },\n            estimates: '',\n            attachment:{}\n        });\n\n        /*methods*/\n        angular.extend($scope, {\n            saveNewTicket: function(addTicketForm) {\n                if (addTicketForm.$valid) {\n                    // console.log($scope.newTicket);\n                    var ticketData = {\n                        title: $scope.newTicket.title,\n                        description: $scope.newTicket.comment,\n                        complete_date: $scope.newTicket.completeDate,\n                        project_id: $scope.newTicket.project[0].id,\n                        assigned_to: $scope.newTicket.users[0].id,\n                        followers: [],\n                        type: $scope.newTicket.type,\n                        status: $scope.newTicket.status,\n                        estimate_id: $scope.newTicket.estimate\n                    };\n\n                    /*Adding follower ids*/\n                    angular.forEach($scope.newTicket.followers, function(value, key) {\n                        ticketData.followers.push(value.id);\n                    });\n\n                    ticketFactory.saveTicket(ticketData).success(function(response) {\n                        $location.path('/ticket/list');\n                        snackbar.create(\"New ticket added.\", 1000);\n                    });\n                }\n            },\n            updateTicket: function(updateTicketForm) {\n                if (updateTicketForm.$valid) {\n                    var ticketData = {\n                        title: $scope.newTicket.title,\n                        description: $scope.newTicket.comment,\n                        complete_date: $scope.newTicket.completeDate,\n                        project_id: $scope.newTicket.project[0].id,\n                        assigned_to: $scope.newTicket.users[0].id,\n                        followers: [],\n                        type: $scope.newTicket.type,\n                        status: $scope.newTicket.status,\n                        id: $routeParams.ticketId,\n                        estimate_id: $scope.newTicket.estimate\n                    };\n\n                    /*Adding follower ids*/\n                    angular.forEach($scope.newTicket.followers, function(value, key) {\n                        ticketData.followers.push(value.id);\n                    });\n\n                    ticketFactory.updateTicket(ticketData).success(function(response) {\n                        $location.path('/ticket/list');\n                        snackbar.create(\"Ticket updated.\", 1000);\n                    });\n                }\n            },\n            submitConversation: function() {\n                if ($scope.conversation.conversationDesc != undefined && $scope.conversation.conversationDesc != \"\") {\n                    if($scope.conversation.file == undefined || $scope.conversation.file.length == 0 || $scope.conversation.file == []) {\n                        $scope.saveNewConversation();\n                        return;\n                    } else {\n\n                        Upload.upload({\n                            url: baseUrl+'upload/file',\n                            data: {\n                                file: $scope.conversation.file,\n                                destination: 's3',\n                                path: 'attachments'\n                            }\n                        }).then(function (resp) {\n                            $scope.attachments = resp.data;\n                            $scope.saveNewConversation();\n                        }, function (resp) {\n                            snackbar.create(resp.data, 1000);\n                        });\n                    }\n                } else {\n                    snackbar.create(\"Add some text before saving the discussion.\", 1000);\n                }\n            },\n\n            saveNewConversation: function() {\n                var data = {\n                    comment: $scope.conversation.conversationDesc,\n                    ticketId: $routeParams.ticketId,\n                    attachments: $scope.attachments\n                };\n\n                commentFactory.saveTicketConversation(data).success(function(response) {\n                    $scope.conversation.conversationDesc = \"\";\n                    $scope.conversation.file = [];\n                    $scope.ticketAttachments = response.data.attachments;\n                    $scope.ticketComments = response.data.comments;\n                });\n            },\n            removeFile : function(item) {\n                var index = $scope.conversation.file.indexOf(item);\n                $scope.conversation.file.splice(index, 1);\n            }\n        });\n\n    }\n]);\n","myApp.factory('ticketFactory', ['$http', function($http) {\n    var ticketFactory = {};\n\n    ticketFactory.saveTicket = function(ticketData) {\n        return $http({\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            url: baseUrl + 'api/save-new-ticket',\n            method: 'POST',\n            data: ticketData\n        });\n    }\n\n    ticketFactory.updateTicket = function(ticketData) {\n        return $http({\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            url: baseUrl + 'api/update-ticket',\n            method: 'POST',\n            data: ticketData\n        });\n    }\n\n    ticketFactory.getAllTickets = function() {\n        return $http.get(baseUrl + 'api/get-ticket');\n    }\n\n    ticketFactory.getTicketById = function(id) {\n        return $http.get(baseUrl + 'api/get-ticket-by-id/' + id);\n    }\n\n    ticketFactory.getTickeType = function() {\n        return $http.get(baseUrl + 'api/get-ticket-types');\n    }\n\n    ticketFactory.getTickeStatus = function() {\n        return $http.get(baseUrl + 'api/get-ticket-status');\n    }\n\n    ticketFactory.getMyTickets = function() {\n        return $http.get(baseUrl + 'api/get-my-tickets');\n    }\n\n    ticketFactory.getTicketsFollowing = function() {\n        return $http.get(baseUrl + 'api/get-tickets-following');\n    }\n\n    ticketFactory.getTicketTimeEntries = function(id) {\n        return $http.get(baseUrl + 'api/get-tickets-time-entries/' + id);\n    }\n\n    ticketFactory.getEstimatesByProject = function(id) {\n        return $http.get(baseUrl + 'api/get-project-estimate-list/' + id);\n    }\n\n    ticketFactory.getTicketAttachments = function(id) {\n        return $http.get(baseUrl + 'api/get-ticket-attachments/' + id);\n    }\n\n    return ticketFactory;\n}])\n","/**\n * Created by amitav on 12/13/15.\n */\nmyApp.factory('commentFactory', ['$http', function($http) {\n    var commentFactory = {};\n\n    commentFactory.getProjectComments = function(projectId) {\n        return $http.get(baseUrl + 'api/get-project-comments/' + projectId);\n    }\n\n    commentFactory.saveComment = function(commentData) {\n        return $http({\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            url: baseUrl + 'api/save-project-comment',\n            method: 'POST',\n            data: commentData\n        });\n    }\n\n    commentFactory.getTicketComments = function(ticketId) {\n        return $http.get(baseUrl + 'api/get-ticket-comments/' + ticketId);\n    }\n\n    commentFactory.saveTicketConversation = function(conversationData) {\n        return $http({\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            url: baseUrl + 'api/save-ticket-conversation',\n            method: 'POST',\n            data: conversationData\n        });\n    }\n\n    return commentFactory;\n}]);\n","myApp.factory('timeEntry', ['$http', function($http) {\n    var timeEntry = {};\n\n    timeEntry.getEntries = function() {\n        return $http.get(baseUrl + 'api/time-report');\n    }\n\n    /*timeEntry.getUserList = function() {\n        return $http.get(baseUrl + 'api/get-user-list');\n    }*/\n\n    timeEntry.getSearchResult = function(filterParams) {\n        return $http({\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            url: baseUrl + 'api/time-report-filter',\n            method: 'POST',\n            data: filterParams\n        });\n    }\n\n    timeEntry.getTimeSheetEntryByDate = function() {\n        return $http.get(baseUrl + 'api/get-timeentry-by-date');\n    }\n\n    timeEntry.getEntriesForEstimate = function(estimateId) {\n        return $http.get(baseUrl + 'api/get-timeentry-for-estimate/' + estimateId);\n    }\n\n    timeEntry.getBackDateEntries = function() {\n        return $http.get(baseUrl + 'api/get-backdate-entries');\n    }\n\n    timeEntry.saveBackDateEntry = function(entryData) {\n        return $http({\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            url: baseUrl + 'api/allow-backdate-entry',\n            method: 'POST',\n            data: entryData\n        });\n    }\n\n    timeEntry.getRequestBackDateEntries = function() {\n        return $http.get(baseUrl + 'api/get-request-backdate-entries');\n    }\n\n    timeEntry.getRequestBackDateEntriesById = function(id) {\n        return $http.get(baseUrl + 'api/get-request-backdate-entries-by-id/' + id);\n    }\n\n    timeEntry.saveRequestBackDateEntry = function(entryData) {\n        return $http({\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            url: baseUrl + 'api/allow-request-backdate-entry',\n            method: 'POST',\n            data: entryData\n        });\n    }\n\n    return timeEntry;\n}]);\n","myApp.controller('logoutController', ['$scope', 'userFactory',\n    function($scope, userFactory) {\n        userFactory.logoutUser().success(function(response) {\n            console.log('logout', response);\n            window.location = baseUrl;\n        });\n    }\n]);\n","myApp.controller('userController', ['$scope', 'action', 'timeEntry', '$location', 'userFactory', 'snackbar',\n    function($scope, action, timeEntry, $location, userFactory, snackbar) {\n        /*check if users are loaded*/\n        if (action && action.users != undefined) {\n            action.users.success(function(response) {\n                console.log('all users', response);\n                $scope.users = response;\n            });\n        }\n\n        if (action && action.allEntries != undefined) {\n            window.document.title = 'Request Backdate entry';\n\n            action.allEntries.success(function(response) {\n                if (response.length != 0) {\n                    console.log('all Entries', response.length);\n                    $scope.allEntries = response;\n                    $scope.showEntries = true;\n                }\n            });\n        }\n\n        /*Variables*/\n        angular.extend($scope, {\n            requestBackdate: {},\n            allEntries: {},\n            showEntries: false\n        });\n\n        /*Methods*/\n        angular.extend($scope, {\n            requestBackdateSubmit: function(requestBackdateForm) {\n                if (requestBackdateForm.$valid) {\n                    /*get all the user ids*/\n                    var userIds = [];\n                    if ($scope.requestBackdate != undefined) {\n                        angular.forEach($scope.requestBackdate.users, function(value, key) {\n                            userIds.push(value.id);\n                        });\n                    }\n\n                    /*create the post data*/\n                    var entryData = {\n                        date: $scope.requestBackdate.backdate,\n                        users: userIds,\n                        comment: $scope.requestBackdate.reason\n                    };\n\n                    timeEntry.saveRequestBackDateEntry(entryData).success(function(response) {\n                        console.log('backdate entries', response);\n                        $scope.allEntries = response;\n                        $scope.requestBackdate = {};\n                        $scope.showEntries = true;\n                        snackbar.create(\"Entry added and mail sent.\", 1000);\n                    });\n                }\n            }\n        });\n\n    }\n]);\n","myApp.factory('userFactory', ['$http', '$cookies',\n    function($http, $cookies) {\n        var userFactory = {};\n\n        userFactory.logoutUser = function() {\n            $cookies.remove('userObj');\n            return $http.get(baseUrl + 'logout');\n        }\n\n        userFactory.getUserList = function() {\n            return $http.get(baseUrl + 'api/get-user-list');\n        }\n\n        userFactory.getUserObj = function() {\n            return $http.get(baseUrl + 'api/get-user_data');\n        }\n\n        userFactory.getUserListByRole = function() {\n            /*Code for loading users by role id*/\n            var role = [1,3];\n            var jsonData=JSON.stringify(role);\n\n            return $http({\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                url: baseUrl + 'api/get-user-list-by-role',\n                method: 'POST',\n                data:  jsonData\n            });\n        }\n\n        return userFactory;\n    }\n]);\n"],"sourceRoot":"/source/"}